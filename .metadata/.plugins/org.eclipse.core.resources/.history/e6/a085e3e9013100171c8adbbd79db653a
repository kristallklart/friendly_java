package friendly.ejb;

import java.io.Serializable;
import java.util.Date;

public class FriendlyUserLocationPurposeKey implements Serializable {

	private static final long serialVersionUID = 5787290685974371234L;
	private String purposeType;
	private String city;
	private String username;
	private Date fromDate;
	private Date toDate;

	public FriendlyUserLocationPurposeKey() {}
	
	public FriendlyUserLocationPurposeKey(String purpose, String location, FriendlyUser friendlyUser, Date fromDate, Date toDate) {
		this.purposeType = purpose;
		this.city = location;
		this.friendlyUser = friendlyUser;
		this.fromDate = fromDate;
		this.toDate = fromDate;
	}

	public String getPurpose() {
		return purposeType;
	}

	public void setPurpose(String purposeType) {
		this.purposeType = purposeType;
	}

	public String getLocation() {
		return city;
	}

	public void setLocation(String location) {
		this.city = location;
	}

	public FriendlyUser getFriendlyUser() {
		return friendlyUser;
	}

	public void setFriendlyUser(FriendlyUser friendlyUser) {
		this.friendlyUser = friendlyUser;
	}

	public Date getFromDate() {
		return fromDate;
	}

	public void setFromDate(Date fromDate) {
		this.fromDate = fromDate;
	}

	public Date getToDate() {
		return toDate;
	}

	public void setToDate(Date toDate) {
		this.toDate = toDate;
	}

	@Override
	public boolean equals(Object other) {

		if (this == other) {
			return true;
		}

		if (other == null) {
			return false;
		}

		if (!(other instanceof FriendlyUserLocationPurposeKey)) {
			return false;
		}

		FriendlyUserLocationPurposeKey castOther = (FriendlyUserLocationPurposeKey) other;

		return (this.friendlyUser.getUsername() == castOther.friendlyUser.getUsername())
				|| (this.friendlyUser.getUsername() != null && castOther.friendlyUser.getUsername() != null
						&& this.friendlyUser.getUsername().equals(castOther.friendlyUser.getUsername()))
						&& (this.city.getCity() == castOther.city.getCity())
				|| (this.city.getCity() != null && castOther.city.getCity() != null
						&& this.city.getCity().equals(castOther.city.getCity()))
						&& (this.purposeType.getPurposeType() == castOther.purposeType.getPurposeType())
				|| (this.purposeType.getPurposeType() != null && castOther.purposeType.getPurposeType() != null
						&& this.purposeType.getPurposeType().equals(castOther.purposeType.getPurposeType()))
						&& (this.fromDate == castOther.fromDate)
				|| (this.fromDate != null && castOther.fromDate != null
						&& this.fromDate.toString().equals(castOther.fromDate.toString()))
						&& (this.toDate == castOther.toDate)
				|| (this.toDate != null && castOther.toDate != null
						&& this.toDate.toString().equals(castOther.toDate.toString()));
	}

	@Override
	public int hashCode() {
		return super.hashCode();
	}

}
